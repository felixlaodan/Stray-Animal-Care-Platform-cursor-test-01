<?xml version="1.0" encoding="UTF-8"?>
<!-- 这是一个XML文件的声明，指定了XML的版本和使用的字符编码。 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--
    <project> 是所有 Maven pom.xml 文件的根元素。
    xmlns, xmlns:xsi, xsi:schemaLocation 这些是XML命名空间和模式位置的定义，
    它们能帮助编辑器（如IntelliJ IDEA, VSCode）验证我们写的 pom.xml 文件格式是否正确。
    -->

    <!--
    <modelVersion> 指定了当前POM模型的版本。对于Maven 2和3，这个值固定是 4.0.0。
    -->
    <modelVersion>4.0.0</modelVersion>

    <!--
    <parent> 标签用于指定一个父项目。
    子项目会继承父项目中的大部分配置，这样可以简化配置，也能保证项目间依赖版本的一致性。
    -->
    <parent>·
        <!--
        <groupId> 和 <artifactId> 共同定义了一个项目在所有Maven项目中的唯一坐标。
        这里我们指定了 `spring-boot-starter-parent` 作为父项目。
        `spring-boot-starter-parent` 是一个特殊的Spring Boot项目，它提供了非常有用的默认配置，
        比如：
        1. 默认的Java编译级别。
        2. 依赖管理：它定义了大量常用依赖的版本号，这样我们在自己的项目中引入这些依赖时就无需指定版本号，
           避免了版本冲突的问题。
        -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/> <!-- 这个空标签告诉Maven，如果本地仓库没有这个parent，就去远程仓库查找，而不是在本地文件系统中查找。 -->
    </parent>

    <!--
    下面这三个标签定义了我们自己项目的Maven坐标，它们是项目的唯一标识。
    -->
    <!-- <groupId> 通常是公司或组织的域名倒写，比如 com.google, org.apache。这里我们定义为 com.strayanimal.platform。 -->
    <groupId>com.strayanimal.platform</groupId>
    <!-- <artifactId> 是这个具体项目的名称，通常是模块名。这里是 stray-animal-care。 -->
    <artifactId>stray-animal-care</artifactId>
    <!--
    <version> 是项目的版本号。
    `SNAPSHOT` 后缀表示这是一个快照版本，意味着项目还在开发中，是不稳定的版本。
    当项目正式发布时，会去掉 `SNAPSHOT`，比如 `0.0.1`。
    -->
    <version>0.0.1-SNAPSHOT</version>

    <!-- <name> 是一个更具可读性的项目名称，主要用于文档和展示。 -->
    <name>Stray Animal Care Platform</name>
    <!-- <description> 是对项目的简短描述。 -->
    <description>Backend for Stray Animal Care Platform</description>

    <!--
    <properties> 标签用于定义一些常量值（属性）。
    这样做的好处是，当我们需要在多处使用同一个值时（比如版本号），只需要在这个标签里定义一次，
    然后在其他地方通过 `${}` 的语法来引用它，比如 `${java.version}`。
    这样方便统一管理和修改。
    -->
    <properties>
        <java.version>17</java.version>
        <mybatis-plus.version>3.5.12</mybatis-plus.version>
    </properties>

    <!--
    <dependencies> 标签包含了项目所需要的所有依赖库。
    每个 <dependency> 标签都代表一个外部的Java库（通常是 .jar 文件）。
    Maven会自动从远程仓库下载这些库，并把它们添加到你的项目中。
    -->
    <dependencies>
        <!--
        这是 Spring Boot Web 开发的起步依赖 (Starter)。
        "Starter" 是 Spring Boot 的一个重要概念，它是一个依赖集合的描述符。
        引入这一个依赖，就相当于引入了构建Web应用所需的一系列相关依赖，
        比如 Spring MVC 框架、Tomcat服务器等。这大大简化了配置。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--
        这是 MySQL 数据库的Java连接驱动。
        我们的Java代码需要通过这个驱动程序才能和MySQL数据库进行通信。
        -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <!--
            <scope>runtime</scope> 表示这个依赖在编译时不需要，只在运行时需要。
            因为我们的代码通常是面向JDBC标准接口编程，而不是直接使用MySQL的特定类。
            只有当程序实际运行并连接数据库时，才需要这个驱动的具体实现。
            -->
            <scope>runtime</scope>
        </dependency>

        <!--
        这是 MyBatis-Plus 的 Spring Boot Starter。
        MyBatis-Plus 是一个对 MyBatis 框架的增强工具，它提供了很多方便的功能（比如通用的CRUD操作），
        可以简化数据库操作的开发工作，让我们更专注于业务逻辑。
        这个 starter 帮助我们将 MyBatis-Plus 轻松集成到 Spring Boot 项目中。
        注意它的版本号引用了我们上面在 <properties> 中定义的 `mybatis-plus.version`。
        -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!--
        JSQLParser 是一个SQL解析库，MyBatis-Plus 的一些高级功能（如分页插件）依赖它来解析和修改SQL语句。
        -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-jsqlparser</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!--
        Lombok 是一个非常实用的Java库。
        它可以通过注解（比如 @Data, @Getter, @Setter）在编译时自动为我们生成Java类的构造函数、getter/setter方法、toString()等样板代码。
        这能让我们的代码变得非常简洁。
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <!--
            <optional>true</optional> 表示这个依赖是可选的。
            如果其他项目依赖于我们这个项目，那么它们默认不会继承到 Lombok 这个依赖。
            这通常用于那些只在本项目开发阶段起作用，而不应该传递给下游项目的依赖。
            -->
            <optional>true</optional>
        </dependency>

        <!-- Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- JWT (JSON Web Token) -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>

        <!--
        这是 Spring Boot 的测试起步依赖。
        它包含了进行单元测试和集成测试所需的库，比如 JUnit, Mockito, Spring Test等。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <!--
            <scope>test</scope> 表示这个依赖只在测试阶段需要。
            这意味着它只会出现在测试代码的编译和运行路径中，
            而不会被打包到最终发布的应用（.jar文件）里，从而减小了应用的大小。
            -->
            <scope>test</scope>
        </dependency>
        
    </dependencies>

    <!--
    <build> 标签定义了与项目构建（比如编译、打包）相关的配置。
    -->
    <build>
        <!--
        <plugins> 标签用来配置Maven插件。
        Maven本身的核心功能比较精简，很多具体的工作（如编译代码、运行测试、打包应用）都是通过插件来完成的。
        -->
        <plugins>
            <!--
            这是 Spring Boot 的 Maven 插件。
            它非常重要，主要作用有两个：
            1. 把项目打包成一个可执行的 "fat jar"。这个jar包不仅包含了我们自己写的代码，还内嵌了所有依赖的jar包和一个Tomcat服务器。
               这样我们就可以用一个简单的 `java -jar` 命令来启动整个Web应用，非常方便。
            2. 帮助运行和调试Spring Boot应用。
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--
                <configuration> 标签用于对插件进行个性化配置。
                -->
                <configuration>
                    <!--
                    这里我们配置在最终打包时排除 Lombok。
                    因为 Lombok 的功能是在编译期自动生成代码，一旦代码生成完毕，
                    运行时的应用就不再需要 Lombok 库本身了。
                    把它排除掉可以减小最终jar包的体积。
                    -->
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
